<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
           version="3.0">

    <!--1.创建DispatcherServlet对象（转发servlet）
         用来处理用户发送的所有请求
    -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--2.设置DispatcherServlet读取的spring配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!--处理用户的所有请求，统一交给DispatcherServlet处理
            / 表示用户所有的请求,当用户的返回信息中包含静态资源的访问

            jsp页面中 包含 css文件的访问 导致静态资源无法访问
            解决方案： 1.servlet解决：
                     2.springMVC提供解决


        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--通过servlet解决静态资源无法访问的问题
        通过利用一个DefaultServlet对象处理静态资源：
        处理当遇到.css结尾请求路径，直接访问该资源进行返回
        名字叫default的Servlet在哪里创建的？？？
        tomcat自动读取conf目录的下的web.xml文件
        web.xml文件定义了DefualtServlet对象
    -->
    <!--<servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>-->
    <!--设置编码过滤器 springMVC-->
    <filter>
        <filter-name>characterFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
